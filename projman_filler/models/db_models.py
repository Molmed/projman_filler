
# ------------------------------------------------------
# The basics of this file has been auto-generated by
# sqlacodegen 2017-09-20, and contains generated classes
# for all  the tables available in the ProjMan db at that date.
# It has then been modified manually, and thus it cannot be overwritten
# with a new one without loss of functionality.
# /JD 2017-09-20
# ------------------------------------------------------

from sqlalchemy import BigInteger, Column, DateTime, Float, Integer, SmallInteger, String, Unicode
from sqlalchemy.ext.declarative import declarative_base


Base = declarative_base()
metadata = Base.metadata


def _filter_private_field(model_dict):
    new_dict = {}
    for k, v in model_dict.items():
        if not k.startswith("_"):
            new_dict[k] = v
    return new_dict


class FlowcellLaneResult(Base):
    __tablename__ = 'flowcell_lane_results'

    flowcell_id = Column(Unicode(50), primary_key=True, nullable=False)
    lane_num = Column(Integer, primary_key=True, nullable=False)
    read_num = Column(Integer, primary_key=True, nullable=False)
    raw_density = Column(Float(24))
    pf_density = Column(Float(24))
    error_rate = Column(Float(24))
    raw_clusters = Column(BigInteger)
    pf_clusters = Column(BigInteger)
    cycles = Column(SmallInteger)
    pct_q30 = Column(Float(24))
    mean_q = Column(Float(24))
    delivered = Column(Integer)

    def __eq__(self, other):
        if isinstance(other, FlowcellLaneResult):
            return _filter_private_field(self.__dict__) == _filter_private_field(other.__dict__)
        else:
            return False

    def __str__(self):
        return str(_filter_private_field(self.__dict__))


class FlowcellRunfolder(Base):
    __tablename__ = 'flowcell_runfolder'

    flowcell_id = Column(String(50, 'SQL_Latin1_General_CP1_CI_AS'), primary_key=True, index=True)
    runfolder_name = Column(String(255, 'SQL_Latin1_General_CP1_CI_AS'), nullable=False)
    run_date = Column(DateTime, nullable=False)

    def __eq__(self, other):
        if isinstance(other, FlowcellRunfolder):
            return _filter_private_field(self.__dict__) == _filter_private_field(other.__dict__)
        else:
            return False

    def __str__(self):
        return str(_filter_private_field(self.__dict__))


class SampleResult(Base):
    __tablename__ = 'sample_results'

    flowcell_id = Column(String(50, 'SQL_Latin1_General_CP1_CI_AS'), primary_key=True, nullable=False, index=True)
    project_id = Column(String(50, 'SQL_Latin1_General_CP1_CI_AS'), primary_key=True, nullable=False)
    sample_name = Column(String(255, 'SQL_Latin1_General_CP1_CI_AS'), primary_key=True, nullable=False)
    tag_seq = Column(String(50, 'SQL_Latin1_General_CP1_CI_AS'), primary_key=True, nullable=False)
    lane_num = Column(Integer, primary_key=True, nullable=False)
    read_num = Column(Integer, primary_key=True, nullable=False)
    cycles = Column(Integer, nullable=False)
    pct_lane = Column(Float(24))
    pf_clusters = Column(BigInteger)
    pct_q30 = Column(Float(24))
    pct_tag_err = Column(Float(24))
    library_name = Column(String(255, 'SQL_Latin1_General_CP1_CI_AS'))
    mean_q = Column(Float(24))

    def __eq__(self, other):
        if isinstance(other, SampleResult):
            return _filter_private_field(self.__dict__) == _filter_private_field(other.__dict__)
        else:
            return False

    def __str__(self):
        return str(_filter_private_field(self.__dict__))
